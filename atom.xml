<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Noah Zhao</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-25T00:38:26.314Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Noah Zhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>addition</title>
    <link href="http://example.com/2021/04/25/addition/"/>
    <id>http://example.com/2021/04/25/addition/</id>
    <published>2021-04-24T22:56:03.000Z</published>
    <updated>2021-04-25T00:38:26.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="addition"><a href="#addition" class="headerlink" title="addition"></a>addition</h1><p>四种方式实现3+4=7</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-comment">//面向过程</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">add1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125; <br><span class="hljs-comment">//面向对象的编程</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ADD</span>&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br>&#125;add2;<br><span class="hljs-comment">//模板</span><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T,<span class="hljs-keyword">typename</span> U&gt; <br>auto add3(T a,U b) -&gt; decltype(a+b)<br>&#123;<br><span class="hljs-keyword">return</span> a+b;<br>&#125;<br><span class="hljs-comment">//兰姆达表达式</span><br><span class="hljs-keyword">auto</span> add4=[](<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)-&gt; <span class="hljs-keyword">int</span> &#123;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cout&lt;&lt;<span class="hljs-built_in">add1</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-built_in">add2</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-built_in">add3</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)&lt;&lt;endl;<br>cout&lt;&lt;<span class="hljs-built_in">add4</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于兰姆达表达式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;<br> <br>    <span class="hljs-keyword">auto</span> func = [=, &amp;b](<span class="hljs-keyword">int</span> c)-&gt;<span class="hljs-keyword">int</span> &#123;<span class="hljs-keyword">return</span> b += a + c;&#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>$$<br><a href="parameters">capture</a> mutable -&gt;return-type{statement}<br>$$</p><p>1.[capture]：捕捉列表。捕捉列表总是出现在Lambda函数的开始处。实际上，[]是Lambda引出符。编译器根据该引出符判断接下来的代码是否是Lambda函数。捕捉列表能够捕捉上下文中的变量以供Lambda函数使用;</p><p>2.(parameters)：参数列表。与普通函数的参数列表一致。如果不需要参数传递，则可以连同括号“()”一起省略;</p><p>3.mutable：mutable修饰符。默认情况下，Lambda函数总是一个const函数，mutable可以取消其常量性。在使用该修饰符时，参数列表不可省略（即使参数为空）;</p><p>4.-&gt;return-type：返回类型。用追踪返回类型形式声明函数的返回类型。我们可以在不需要返回值的时候也可以连同符号”-&gt;”一起省略。此外，在返回类型明确的情况下，也可以省略该部分，让编译器对返回类型进行推导;</p><p>5.{statement}：函数体。内容与普通函数一样，不过除了可以使用参数之外，还可以使用所有捕获的变量。</p><p>与普通函数最大的区别是，除了可以使用参数以外，Lambda函数还可以通过捕获列表访问一些上下文中的数据。具体地，捕捉列表描述了上下文中哪些数据可以被Lambda使用，以及使用方式（以值传递的方式或引用传递的方式）。语法上，在“[]”包括起来的是捕捉列表，捕捉列表由多个捕捉项组成，并以逗号分隔。捕捉列表有以下几种形式：</p><p>1.[var]表示值传递方式捕捉变量var；<br>2.[=]表示值传递方式捕捉所有父作用域的变量（包括this）；<br>3.[&amp;var]表示引用传递捕捉变量var；<br>4.[&amp;]表示引用传递方式捕捉所有父作用域的变量（包括this）；<br>5.[this]表示值传递方式捕捉当前的this指针。</p><p>上面提到了一个父作用域，也就是包含Lambda函数的语句块，说通俗点就是包含Lambda的“{}”代码块。上面的捕捉列表还可以进行组合，例如：</p><p>1.[=,&amp;a,&amp;b]表示以引用传递的方式捕捉变量a和b，以值传递方式捕捉其它所有变量;<br>2.[&amp;,a,this]表示以值传递的方式捕捉变量a和this，引用传递方式捕捉其它所有变量。</p><p>不过值得注意的是，捕捉列表不允许变量重复传递。下面一些例子就是典型的重复，会导致编译时期的错误。例如：</p><p>3.[=,a]这里已经以值传递方式捕捉了所有变量，但是重复捕捉a了，会报错的;<br>4.[&amp;,&amp;this]这里&amp;已经以引用传递方式捕捉了所有变量，再捕捉this也是一种重复。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;addition&quot;&gt;&lt;a href=&quot;#addition&quot; class=&quot;headerlink&quot; title=&quot;addition&quot;&gt;&lt;/a&gt;addition&lt;/h1&gt;&lt;p&gt;四种方式实现3+4=7&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/04/25/hello-world/"/>
    <id>http://example.com/2021/04/25/hello-world/</id>
    <published>2021-04-24T22:45:21.686Z</published>
    <updated>2021-04-25T00:29:03.271Z</updated>
    
    <content type="html"><![CDATA[<p>Hello and welcome to my blog, a student of theoretical and computational chemistry who loves programming.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">zhmch9898@gmail.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hello and welcome to my blog, a student of theoretical and computational chemistry who loves programming.&lt;/p&gt;
&lt;figure class=&quot;highlight pl</summary>
      
    
    
    
    
  </entry>
  
</feed>
